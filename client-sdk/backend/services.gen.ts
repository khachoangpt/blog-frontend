// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { $OpenApiTs } from './types.gen';

export class AuthService {
    /**
     * Login
     * Login
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.cache Next.js option
     * @returns LoginResponse Login response
     * @throws ApiError
     */
    public static login(data: $OpenApiTs['/customer/auth/login']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/customer/auth/login']['post']['res'][201]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/customer/auth/login',
            path: {
                cache: data.cache
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
    /**
     * Register
     * Register
     * @param data The data for the request.
     * @param data.requestBody
     * @param data.cache Next.js option
     * @returns RegisterResponse Register response
     * @throws ApiError
     */
    public static register(data: $OpenApiTs['/customer/auth/register']['post']['req'] = {}): CancelablePromise<$OpenApiTs['/customer/auth/register']['post']['res'][201]> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/customer/auth/register',
            path: {
                cache: data.cache
            },
            body: data.requestBody,
            mediaType: 'application/json'
        });
    }
    
}

export class BlogService {
    /**
     * Get blog detail
     * Get blog detail
     * @param data The data for the request.
     * @param data.id Id of blog
     * @param data.cache Next.js option
     * @returns GetBlogDetailResponse A blog
     * @throws ApiError
     */
    public static getBlogDetail(data: $OpenApiTs['/customer/blog/{id}']['get']['req']): CancelablePromise<$OpenApiTs['/customer/blog/{id}']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/customer/blog/{id}',
            path: {
                id: data.id,
                cache: data.cache
            }
        });
    }
    
    /**
     * Get blog list
     * Get blog list
     * @param data The data for the request.
     * @param data.select Select
     * @param data.skip Skip
     * @param data.take Take
     * @param data.relations Relations
     * @param data.order Order
     * @param data.cache Next.js option
     * @returns GetListBlogResponse An array of blogs
     * @throws ApiError
     */
    public static getBlogs(data: $OpenApiTs['/customer/blog']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/customer/blog']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/customer/blog',
            path: {
                cache: data.cache
            },
            query: {
                select: data.select,
                skip: data.skip,
                take: data.take,
                relations: data.relations,
                order: data.order
            }
        });
    }
    
}

export class CustomerService {
    /**
     * Get current customer
     * Get current customer
     * @param data The data for the request.
     * @param data.cache Next.js option
     * @returns GetMeResponse Get current customer success
     * @throws ApiError
     */
    public static getMe(data: $OpenApiTs['/customer/me']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/customer/me']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/customer/me',
            path: {
                cache: data.cache
            }
        });
    }
    
}

export class TagService {
    /**
     * Get tag list
     * Get tag list
     * @param data The data for the request.
     * @param data.select Select
     * @param data.skip Skip
     * @param data.take Take
     * @param data.relations Relations
     * @param data.order Order
     * @param data.cache Next.js option
     * @returns GetTagListResponse An array of tags
     * @throws ApiError
     */
    public static getTags(data: $OpenApiTs['/customer/tag']['get']['req'] = {}): CancelablePromise<$OpenApiTs['/customer/tag']['get']['res'][200]> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/customer/tag',
            path: {
                cache: data.cache
            },
            query: {
                select: data.select,
                skip: data.skip,
                take: data.take,
                relations: data.relations,
                order: data.order
            }
        });
    }
    
}